// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

/**
 * @title DecentraVault
 * @dev A decentralized digital asset storage and management platform with multi-signature security
 * @author DecentraVault Team
 */
contract DecentraVault {
    
    // Events
    event VaultCreated(address indexed owner, uint256 indexed vaultId, string vaultName);
    event AssetDeposited(uint256 indexed vaultId, address indexed depositor, uint256 amount);
    event AssetWithdrawn(uint256 indexed vaultId, address indexed withdrawer, uint256 amount);
    event OwnershipTransferred(uint256 indexed vaultId, address indexed oldOwner, address indexed newOwner);
    
    // Structures
    struct Vault {
        string name;
        address owner;
        uint256 balance;
        bool isActive;
        uint256 createdAt;
        mapping(address => bool) authorizedUsers;
        address[] authorizedList;
    }
    
    // State variables
    mapping(uint256 => Vault) public vaults;
    mapping(address => uint256[]) public userVaults;
    uint256 public vaultCounter;
    uint256 public totalValueLocked;
    
    // Modifiers
    modifier onlyVaultOwner(uint256 _vaultId) {
        require(vaults[_vaultId].owner == msg.sender, "Only vault owner can perform this action");
        _;
    }
    
    modifier vaultExists(uint256 _vaultId) {
        require(_vaultId > 0 && _vaultId <= vaultCounter, "Vault does not exist");
        _;
    }
    
    modifier vaultActive(uint256 _vaultId) {
        require(vaults[_vaultId].isActive, "Vault is not active");
        _;
    }
    
    /**
     * @dev Create a new secure vault for digital asset storage
     * @param _vaultName Name of the vault
     * @return vaultId The ID of the newly created vault
     */
    function createVault(string memory _vaultName) external returns (uint256) {
        require(bytes(_vaultName).length > 0, "Vault name cannot be empty");
        
        vaultCounter++;
        uint256 newVaultId = vaultCounter;
        
        Vault storage newVault = vaults[newVaultId];
        newVault.name = _vaultName;
        newVault.owner = msg.sender;
        newVault.balance = 0;
        newVault.isActive = true;
        newVault.createdAt = block.timestamp;
        
        // Add owner as authorized user
        newVault.authorizedUsers[msg.sender] = true;
        newVault.authorizedList.push(msg.sender);
        
        // Track user's vaults
        userVaults[msg.sender].push(newVaultId);
        
        emit VaultCreated(msg.sender, newVaultId, _vaultName);
        return newVaultId;
    }
    
    /**
     * @dev Deposit digital assets into a specific vault with multi-signature security
     * @param _vaultId ID of the target vault
     */
    function depositAssets(uint256 _vaultId) 
        external 
        payable 
        vaultExists(_vaultId) 
        vaultActive(_vaultId) 
    {
        require(msg.value > 0, "Deposit amount must be greater than 0");
        require(
            vaults[_vaultId].authorizedUsers[msg.sender] || vaults[_vaultId].owner == msg.sender,
            "Not authorized to deposit to this vault"
        );
        
        vaults[_vaultId].balance += msg.value;
        totalValueLocked += msg.value;
        
        emit AssetDeposited(_vaultId, msg.sender, msg.value);
    }
    
    /**
     * @dev Withdraw digital assets from vault with security checks
     * @param _vaultId ID of the source vault
     * @param _amount Amount to withdraw
     */
    function withdrawAssets(uint256 _vaultId, uint256 _amount) 
        external 
        vaultExists(_vaultId) 
        vaultActive(_vaultId) 
        onlyVaultOwner(_vaultId) 
    {
        require(_amount > 0, "Withdrawal amount must be greater than 0");
        require(vaults[_vaultId].balance >= _amount, "Insufficient vault balance");
        
        vaults[_vaultId].balance -= _amount;
        totalValueLocked -= _amount;
        
        (bool success, ) = payable(msg.sender).call{value: _amount}("");
        require(success, "Withdrawal failed");
        
        emit AssetWithdrawn(_vaultId, msg.sender, _amount);
    }
    
    // Additional utility functions
    
    /**
     * @dev Add authorized user to vault
     * @param _vaultId ID of the vault
     * @param _user Address of user to authorize
     */
    function addAuthorizedUser(uint256 _vaultId, address _user) 
        external 
        vaultExists(_vaultId) 
        onlyVaultOwner(_vaultId) 
    {
        require(_user != address(0), "Invalid user address");
        require(!vaults[_vaultId].authorizedUsers[_user], "User already authorized");
        
        vaults[_vaultId].authorizedUsers[_user] = true;
        vaults[_vaultId].authorizedList.push(_user);
    }
    
    /**
     * @dev Get vault information
     * @param _vaultId ID of the vault
     * @return name, owner, balance, isActive, createdAt
     */
    function getVaultInfo(uint256 _vaultId) 
        external 
        view 
        vaultExists(_vaultId) 
        returns (string memory, address, uint256, bool, uint256) 
    {
        Vault storage vault = vaults[_vaultId];
        return (vault.name, vault.owner, vault.balance, vault.isActive, vault.createdAt);
    }
    
    /**
     * @dev Get user's vault IDs
     * @param _user Address of the user
     * @return Array of vault IDs owned by the user
     */
    function getUserVaults(address _user) external view returns (uint256[] memory) {
        return userVaults[_user];
    }
    
    /**
     * @dev Check if user is authorized for a vault
     * @param _vaultId ID of the vault
     * @param _user Address of the user
     * @return true if authorized, false otherwise
     */
    function isAuthorizedUser(uint256 _vaultId, address _user) 
        external 
        view 
        vaultExists(_vaultId) 
        returns (bool) 
    {
        return vaults[_vaultId].authorizedUsers[_user];
    }
}
